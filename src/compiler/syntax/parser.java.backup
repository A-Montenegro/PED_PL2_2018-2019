
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 08 12:28:13 CET 2019
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 08 12:28:13 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\050\002\000\002\002" +
    "\004\000\002\051\002\000\002\003\007\000\002\003\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\004\000" +
    "\002\005\003\000\002\006\006\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\004\000\002\010\002\000\002\011\004\000\002\011\003" +
    "\000\002\012\006\000\002\012\003\000\002\013\005\000" +
    "\002\013\003\000\002\014\004\000\002\014\003\000\002" +
    "\015\006\000\002\015\003\000\002\016\004\000\002\016" +
    "\002\000\002\017\004\000\002\017\003\000\002\020\006" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\006\000\002\022\002\000\002\052\002\000\002" +
    "\023\007\000\002\023\003\000\002\024\004\000\002\024" +
    "\005\000\002\024\002\000\002\025\005\000\002\025\003" +
    "\000\002\026\006\000\002\026\003\000\002\027\004\000" +
    "\002\027\002\000\002\027\003\000\002\030\005\000\002" +
    "\030\002\000\002\030\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\004\000\002\031\004" +
    "\000\002\031\003\000\002\031\003\000\002\032\005\000" +
    "\002\032\007\000\002\041\006\000\002\037\007\000\002" +
    "\040\004\000\002\040\002\000\002\033\006\000\002\033" +
    "\006\000\002\033\003\000\002\034\004\000\002\035\006" +
    "\000\002\035\003\000\002\036\003\000\002\036\005\000" +
    "\002\036\005\000\002\036\007\000\002\036\002\000\002" +
    "\036\003\000\002\042\004\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\005\000\002" +
    "\042\006\000\002\042\003\000\002\043\003\000\002\043" +
    "\003\000\002\046\003\000\002\046\005\000\002\044\010" +
    "\000\002\044\003\000\002\045\006\000\002\045\003\000" +
    "\002\047\003\000\002\047\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\020\000\001\002\000\004\002\260\001" +
    "\002\000\004\020\007\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\010\010\011\001\002\000\004\002\ufffc\001" +
    "\002\000\004\036\ufffe\001\002\000\004\036\014\001\002" +
    "\000\016\003\016\013\ufffa\021\ufffa\031\017\034\ufffa\035" +
    "\ufffa\001\002\000\044\002\uff9d\003\uff9d\010\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\017\uff9d\021\uff9d\022\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\031\uff9d\034\uff9d\035\uff9d\036\014" +
    "\001\002\000\042\002\uff9c\003\uff9c\010\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\017\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\027\uff9c\031\uff9c\034\uff9c\035\uff9c\001\002\000" +
    "\010\002\uffa0\013\uffa0\021\uffa0\001\002\000\006\003\245" +
    "\010\246\001\002\000\012\013\ufff1\021\ufff1\034\023\035" +
    "\ufff1\001\002\000\004\002\ufffd\001\002\000\010\013\uffe5" +
    "\021\uffe5\035\051\001\002\000\006\003\024\010\027\001" +
    "\002\000\014\003\uffed\010\uffed\013\uffed\021\uffed\035\uffed" +
    "\001\002\000\014\003\024\010\027\013\uffef\021\uffef\035" +
    "\uffef\001\002\000\010\013\ufff2\021\ufff2\035\ufff2\001\002" +
    "\000\004\043\030\001\002\000\006\003\032\033\033\001" +
    "\002\000\004\036\014\001\002\000\004\036\uffeb\001\002" +
    "\000\006\003\035\010\037\001\002\000\004\014\046\001" +
    "\002\000\010\003\uffe7\010\uffe7\014\uffe7\001\002\000\010" +
    "\003\035\010\037\014\uffe9\001\002\000\004\042\040\001" +
    "\002\000\006\030\043\032\041\001\002\000\006\036\uffa5" +
    "\040\uffa5\001\002\000\004\036\014\001\002\000\006\036" +
    "\uffa4\040\uffa4\001\002\000\010\003\uffe8\010\uffe8\014\uffe8" +
    "\001\002\000\004\014\uffea\001\002\000\004\036\uffec\001" +
    "\002\000\014\003\uffee\010\uffee\013\uffee\021\uffee\035\uffee" +
    "\001\002\000\010\013\ufff0\021\ufff0\035\ufff0\001\002\000" +
    "\006\003\235\010\102\001\002\000\006\013\uffdd\021\uffdd" +
    "\001\002\000\006\013\054\021\055\001\002\000\024\003" +
    "\126\010\122\014\uffce\015\127\022\117\024\131\025\125" +
    "\026\120\027\116\001\002\000\006\003\056\010\060\001" +
    "\002\000\016\003\uffda\013\uffda\021\uffda\031\uffda\034\uffda" +
    "\035\uffda\001\002\000\016\003\016\013\ufffa\021\ufffa\031" +
    "\017\034\ufffa\035\ufffa\001\002\000\012\003\uffdc\036\uffdc" +
    "\037\uffdc\042\uffdc\001\002\000\012\003\uffd7\036\uffd7\037" +
    "\062\042\uffd7\001\002\000\010\003\073\035\072\040\071" +
    "\001\002\000\010\003\065\036\uffd1\042\066\001\002\000" +
    "\004\036\014\001\002\000\004\036\uffd0\001\002\000\006" +
    "\030\043\032\041\001\002\000\004\036\uffd2\001\002\000" +
    "\016\003\uffdb\013\uffdb\021\uffdb\031\uffdb\034\uffdb\035\uffdb" +
    "\001\002\000\010\003\uffd9\036\uffd9\042\uffd9\001\002\000" +
    "\004\010\102\001\002\000\006\036\uffd3\040\uffd3\001\002" +
    "\000\004\040\100\001\002\000\006\036\014\040\uffd5\001" +
    "\002\000\006\003\073\035\072\001\002\000\004\040\uffd6" +
    "\001\002\000\010\003\uffd8\036\uffd8\042\uffd8\001\002\000" +
    "\004\042\105\001\002\000\006\041\103\042\uffa3\001\002" +
    "\000\004\010\102\001\002\000\004\042\uffa2\001\002\000" +
    "\010\010\110\030\043\032\041\001\002\000\006\036\uffd4" +
    "\040\uffd4\001\002\000\006\036\uffe0\040\uffe0\001\002\000" +
    "\006\036\uffdf\040\uffdf\001\002\000\006\013\uffde\021\uffde" +
    "\001\002\000\004\036\uffc7\001\002\000\004\014\234\001" +
    "\002\000\004\036\uffca\001\002\000\004\014\233\001\002" +
    "\000\004\036\uffbd\001\002\000\020\003\135\004\137\005" +
    "\134\006\133\010\141\012\136\037\140\001\002\000\004" +
    "\037\227\001\002\000\004\036\uffcb\001\002\000\012\036" +
    "\uffba\037\216\046\217\051\220\001\002\000\004\036\uffcc" +
    "\001\002\000\004\036\014\001\002\000\004\037\211\001" +
    "\002\000\014\002\uff9e\013\uff9e\014\uffcd\021\uff9e\036\uffc6" +
    "\001\002\000\020\003\135\004\137\005\134\006\133\010" +
    "\141\012\136\037\140\001\002\000\004\014\200\001\002" +
    "\000\020\003\135\004\137\005\134\006\133\010\141\012" +
    "\136\037\140\001\002\000\010\002\uffa1\013\uffa1\021\uffa1" +
    "\001\002\000\024\011\uffac\016\uffac\023\uffac\036\uffac\040" +
    "\uffac\044\uffac\045\uffac\047\uffac\050\uffac\001\002\000\024" +
    "\011\uffaa\016\uffaa\023\uffaa\036\uffaa\040\uffaa\044\uffaa\045" +
    "\uffaa\047\uffaa\050\uffaa\001\002\000\024\011\uffa6\016\uffa6" +
    "\023\uffa6\036\uffa6\040\uffa6\044\uffa6\045\uffa6\047\uffa6\050" +
    "\uffa6\001\002\000\020\003\135\004\137\005\134\006\133" +
    "\010\141\012\136\037\140\001\002\000\024\011\uffab\016" +
    "\uffab\023\uffab\036\uffab\040\uffab\044\uffab\045\uffab\047\uffab" +
    "\050\uffab\001\002\000\020\003\135\004\137\005\134\006" +
    "\133\010\141\012\136\037\140\001\002\000\030\011\uffa9" +
    "\016\uffa9\023\uffa9\036\uffa9\037\160\040\uffa9\044\uffa9\045" +
    "\uffa9\047\uffa9\050\uffa9\051\161\001\002\000\016\011\147" +
    "\023\150\044\145\045\144\047\143\050\146\001\002\000" +
    "\020\003\135\004\137\005\134\006\133\010\141\012\136" +
    "\037\140\001\002\000\020\003\135\004\137\005\134\006" +
    "\133\010\141\012\136\037\140\001\002\000\020\003\135" +
    "\004\137\005\134\006\133\010\141\012\136\037\140\001" +
    "\002\000\020\003\135\004\137\005\134\006\133\010\141" +
    "\012\136\037\140\001\002\000\020\003\135\004\137\005" +
    "\134\006\133\010\141\012\136\037\140\001\002\000\024" +
    "\003\151\010\122\014\uffce\015\127\022\117\024\131\025" +
    "\125\026\120\027\116\001\002\000\010\014\uffcd\017\uffcd" +
    "\036\uffc6\001\002\000\004\014\uffc3\001\002\000\024\011" +
    "\uffaf\016\uffaf\023\uffaf\036\uffaf\040\uffaf\044\uffaf\045\uffaf" +
    "\047\uffaf\050\uffaf\001\002\000\020\011\147\016\uffad\023" +
    "\uffad\036\uffad\040\uffad\044\145\045\144\001\002\000\024" +
    "\011\147\016\uffb0\023\uffb0\036\uffb0\040\uffb0\044\uffb0\045" +
    "\144\047\uffb0\050\uffb0\001\002\000\024\011\uffb1\016\uffb1" +
    "\023\uffb1\036\uffb1\040\uffb1\044\uffb1\045\uffb1\047\uffb1\050" +
    "\uffb1\001\002\000\020\011\147\016\uffae\023\uffae\036\uffae" +
    "\040\uffae\044\145\045\144\001\002\000\010\003\163\010" +
    "\164\040\uffb5\001\002\000\004\010\162\001\002\000\024" +
    "\011\uffa8\016\uffa8\023\uffa8\036\uffa8\040\uffa8\044\uffa8\045" +
    "\uffa8\047\uffa8\050\uffa8\001\002\000\004\040\uffb4\001\002" +
    "\000\010\040\uffb9\041\170\051\167\001\002\000\004\040" +
    "\166\001\002\000\024\011\uffa7\016\uffa7\023\uffa7\036\uffa7" +
    "\040\uffa7\044\uffa7\045\uffa7\047\uffa7\050\uffa7\001\002\000" +
    "\004\010\172\001\002\000\010\003\163\010\164\040\uffb5" +
    "\001\002\000\004\040\uffb8\001\002\000\006\040\uffb7\041" +
    "\173\001\002\000\010\003\163\010\164\040\uffb5\001\002" +
    "\000\004\040\uffb6\001\002\000\016\011\147\040\176\044" +
    "\145\045\144\047\143\050\146\001\002\000\024\011\uffb2" +
    "\016\uffb2\023\uffb2\036\uffb2\040\uffb2\044\uffb2\045\uffb2\047" +
    "\uffb2\050\uffb2\001\002\000\024\011\uffb3\016\uffb3\023\uffb3" +
    "\036\uffb3\040\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3\001" +
    "\002\000\004\010\201\001\002\000\004\036\014\001\002" +
    "\000\010\002\uff9f\013\uff9f\021\uff9f\001\002\000\016\011" +
    "\147\016\204\044\145\045\144\047\143\050\146\001\002" +
    "\000\026\003\151\010\122\014\uffce\015\127\017\uffce\022" +
    "\117\024\131\025\125\026\120\027\116\001\002\000\006" +
    "\014\uffc0\017\207\001\002\000\004\014\uffc2\001\002\000" +
    "\024\003\151\010\122\014\uffce\015\127\022\117\024\131" +
    "\025\125\026\120\027\116\001\002\000\004\014\uffc1\001" +
    "\002\000\004\007\212\001\002\000\004\040\213\001\002" +
    "\000\004\036\uffbf\001\002\000\026\003\151\010\122\014" +
    "\uffce\015\127\017\uffce\022\117\024\131\025\125\026\120" +
    "\027\116\001\002\000\006\014\uffcf\017\uffcf\001\002\000" +
    "\010\003\163\010\164\040\uffb5\001\002\000\020\003\135" +
    "\004\137\005\134\006\133\010\141\012\136\037\140\001" +
    "\002\000\004\010\221\001\002\000\004\046\222\001\002" +
    "\000\020\003\135\004\137\005\134\006\133\010\141\012" +
    "\136\037\140\001\002\000\016\011\147\036\uffc4\044\145" +
    "\045\144\047\143\050\146\001\002\000\016\011\147\036" +
    "\uffc5\044\145\045\144\047\143\050\146\001\002\000\004" +
    "\040\226\001\002\000\004\036\uffbb\001\002\000\020\003" +
    "\135\004\137\005\134\006\133\010\141\012\136\037\140" +
    "\001\002\000\016\011\147\040\231\044\145\045\144\047" +
    "\143\050\146\001\002\000\004\036\uffbe\001\002\000\016" +
    "\011\147\036\uffbc\044\145\045\144\047\143\050\146\001" +
    "\002\000\004\036\uffc9\001\002\000\004\036\uffc8\001\002" +
    "\000\012\003\uffe1\010\uffe1\013\uffe1\021\uffe1\001\002\000" +
    "\012\003\235\010\102\013\uffe3\021\uffe3\001\002\000\004" +
    "\042\241\001\002\000\006\013\uffe6\021\uffe6\001\002\000" +
    "\010\010\110\030\043\032\041\001\002\000\004\036\014" +
    "\001\002\000\012\003\uffe2\010\uffe2\013\uffe2\021\uffe2\001" +
    "\002\000\006\013\uffe4\021\uffe4\001\002\000\016\003\ufff6" +
    "\010\ufff6\013\ufff6\021\ufff6\034\ufff6\035\ufff6\001\002\000" +
    "\004\043\252\001\002\000\012\013\ufffb\021\ufffb\034\ufffb" +
    "\035\ufffb\001\002\000\016\003\245\010\246\013\ufff8\021" +
    "\ufff8\034\ufff8\035\ufff8\001\002\000\012\013\ufff9\021\ufff9" +
    "\034\ufff9\035\ufff9\001\002\000\010\004\256\005\254\006" +
    "\253\001\002\000\004\036\ufff3\001\002\000\004\036\ufff4" +
    "\001\002\000\004\036\014\001\002\000\004\036\ufff5\001" +
    "\002\000\016\003\ufff7\010\ufff7\013\ufff7\021\ufff7\034\ufff7" +
    "\035\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\003\050\004\001\001\000\002\001" +
    "\001\000\004\003\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\011\001\001\000" +
    "\004\047\012\001\001\000\006\004\017\044\020\001\001" +
    "\000\004\047\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\246\006\247\001\001\000\004\010\021" +
    "\001\001\000\002\001\001\000\004\016\051\001\001\000" +
    "\006\011\025\012\024\001\001\000\002\001\001\000\006" +
    "\011\047\012\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\030\001\001\000\004\047\046\001\001" +
    "\000\002\001\001\000\006\014\033\015\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\044\015\035" +
    "\001\001\000\002\001\001\000\004\043\041\001\001\000" +
    "\002\001\001\000\004\047\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\237\020\235" +
    "\046\236\001\001\000\004\022\052\001\001\000\002\001" +
    "\001\000\024\030\127\031\123\032\122\033\120\034\113" +
    "\035\111\037\114\041\112\045\131\001\001\000\004\023" +
    "\056\001\001\000\002\001\001\000\006\004\017\044\110" +
    "\001\001\000\004\052\060\001\001\000\004\024\062\001" +
    "\001\000\006\025\073\026\074\001\001\000\004\027\063" +
    "\001\001\000\004\047\067\001\001\000\002\001\001\000" +
    "\004\043\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\075\001\001\000\006" +
    "\025\076\026\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\103" +
    "\001\001\000\002\001\001\000\006\021\105\043\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\202\001" +
    "\001\000\002\001\001\000\004\042\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\176\001\001\000\002\001\001\000\004" +
    "\042\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\156\001\001\000\004\042\155\001\001\000\004" +
    "\042\154\001\001\000\004\042\153\001\001\000\004\042" +
    "\152\001\001\000\022\030\151\031\123\032\122\033\120" +
    "\034\113\035\111\037\114\041\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\204" +
    "\031\123\032\122\033\120\034\113\035\111\037\114\041" +
    "\112\001\001\000\004\040\205\001\001\000\002\001\001" +
    "\000\022\030\207\031\123\032\122\033\120\034\113\035" +
    "\111\037\114\041\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\030" +
    "\214\031\123\032\122\033\120\034\113\035\111\037\114" +
    "\041\112\001\001\000\002\001\001\000\004\036\224\001" +
    "\001\000\004\042\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\243\020\235\046\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\241\043\106" +
    "\001\001\000\004\047\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\250\006\247\001\001\000\002\001" +
    "\001\000\004\007\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ntPtoComa ::= TPTOCOMA ntPtoComa 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=pc.getLine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ntPtoComa",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ntPtoComa ::= TPTOCOMA 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=pc.getLine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ntPtoComa",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // finalModulo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalModulo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // finalModulo ::= sentencias TEND TIDENTIFICADOR ntPtoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalModulo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpoModulo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoModulo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpoModulo ::= ctes tipos vars subs TBEGIN finalModulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoModulo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // varSeqDeIds ::= TIDENTIFICADOR TCOMA varSeqDeIds 
            {
              VarSeqDeIds RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vsqidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsqidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarSeqDeIds vsqids = (VarSeqDeIds)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	vsqids.addNombreVariable(ti.getLexema());
        	RESULT=vsqids;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSeqDeIds",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // varSeqDeIds ::= TIDENTIFICADOR 
            {
              VarSeqDeIds RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	VarSeqDeIds vsqids = new VarSeqDeIds();
        	vsqids.addNombreVariable(ti.getLexema());
        	RESULT=vsqids;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSeqDeIds",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipoPrimitivo ::= TBOOLEAN 
            {
              Object RESULT =null;
		 RESULT = new TipoPrimitivo("LOGICO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipoPrimitivo ::= TINTEGER 
            {
              Object RESULT =null;
		 RESULT = new TipoPrimitivo("ENTERO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= TIDENTIFICADOR TPARI sentCallParams TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= TIDENTIFICADOR TPUNTO TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= TLFALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= TLTRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= TLINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion TDISTINTO expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion TMENOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion TAND expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion TSUMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion TDIVIDE expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= TPARI expresion TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= TNOT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentCallParams ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentCallParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentCallParams ::= TIDENTIFICADOR TPUNTO TIDENTIFICADOR TCOMA sentCallParams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentCallParams ::= TIDENTIFICADOR TPUNTO TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentCallParams ::= TIDENTIFICADOR TCOMA sentCallParams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentCallParams ::= TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentCall ::= TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentCall ::= TIDENTIFICADOR TPARI sentCallParams TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentReturn ::= TRETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentES ::= TWRITELN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentES ::= TWRITEINT TPARI expresion TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentES ::= TWRITESTRING TPARI TLSTRING TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentElse ::= TELSE sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentIf ::= TIF expresion TTHEN sentencias sentElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentWhile ::= TWHILE expresion TDO sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentAsign ::= TIDENTIFICADOR TPUNTO TIDENTIFICADOR TASSIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentAsign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentAsign ::= TIDENTIFICADOR TASSIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentAsign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sent ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sent ::= sentCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sent ::= sentWhile TEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sent ::= sentIf TEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sent ::= sentReturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sent ::= sentES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sent ::= sentAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= sent ntPtoComa sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // subReturn ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subReturn",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // subReturn ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subReturn",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // subReturn ::= TDOSPTS tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subReturn",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // subPar ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subPar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // subPar ::= TVAR varSeqDeIds TDOSPTS varTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subPar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // subParamsCuerpo ::= subPar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParamsCuerpo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // subParamsCuerpo ::= subPar ntPtoComa subParamsCuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParamsCuerpo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // subParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParams",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // subParams ::= TPARI subParamsCuerpo TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParams",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // subParams ::= TPARI TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParams",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // subDecl ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subDecl ::= TIDENTIFICADOR NT$2 subParams subReturn ntPtoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        	String name= id.getLexema();
        	scopeManager.openScope(name);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // subs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // subs ::= subs TPROCEDURE subDecl cuerpoModulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varTipo ::= TIDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varTipo ::= tipoPrimitivo 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var ::= error 
            {
              Var RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var ::= varSeqDeIds TDOSPTS varTipo ntPtoComa 
            {
              Var RESULT =null;
		int vsidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vsidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarSeqDeIds vsids = (VarSeqDeIds)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Var var=new Var(vsids,(Tipo)vt,(Integer)pc);
			RESULT=var;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // varsLista ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsLista",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // varsLista ::= var varsLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsLista",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vars ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vars ::= TVAR varsLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // regCampo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regCampo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // regCampo ::= TIDENTIFICADOR TDOSPTS tipoPrimitivo ntPtoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regCampo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // regCampos ::= regCampo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regCampos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // regCampos ::= regCampo regCampos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regCampos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // registro ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("registro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // registro ::= TRECORD regCampos TEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("registro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= TIDENTIFICADOR TIGUAL registro ntPtoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tiposLista ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposLista",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tiposLista ::= tipo tiposLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposLista",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipos ::= TTYPE tiposLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cteValor ::= TLINT 
            {
              CteValor RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CteValor(t.getLexema());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cteValor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cteValor ::= TLFALSE 
            {
              CteValor RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CteValor(t.getLexema());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cteValor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cteValor ::= TLTRUE 
            {
              CteValor RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CteValor(t.getLexema());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cteValor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cte ::= error 
            {
              Cte RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cte ::= TIDENTIFICADOR TIGUAL cteValor ntPtoComa 
            {
              Cte RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CteValor cv = (CteValor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				Cte cte=new Cte(id.getLexema(),cv);
				RESULT=cte;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ctesLista ::= cte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctesLista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ctesLista ::= cte ctesLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctesLista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ctes ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ctes ::= TCONST ctesLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= TMODULE error 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= TMODULE TIDENTIFICADOR NT$1 ntPtoComa cuerpoModulo 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Axiom RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        	String name= id.getLexema();
        	scopeManager.openScope(name);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
	
	
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

